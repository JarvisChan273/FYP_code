// RAID4 seperated works
#include "Arduino.h"

//#include <ESP8266WiFi.h>
#include "WiFiEsp.h"
#include "ThingSpeak.h"
#define ESP_BAUDRATE 9600

#include <SPI.h>
#include <time.h>

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
//#include <ESP8266_Lib.h>
#include "WiFiEsp.h"

#include <SoftwareSerial.h>
//SoftwareSerial Serial1(19, 18);  // RX, TX
//SoftwareSerial Serial2(17, 16);  // RX, TX
//SoftwareSerial Serial3(15, 14);  // RX, TX
SoftwareSerial Serial4(10, 11);  // RX, TX

//WIFI -----------------------------------------------------------------------
//SoftwareSerial EspSerial(12, 13);

//ESP8266 wifi(&EspSerial);

char* ssid = "jarvis"; // your network SSID (name)
char* pass = "127820aA"; // your network password
// int status = WL_IDLE_STATUS; // the Wifi radio's status


unsigned long channelnumber = 1667978;
const char* readkey = "OKO1MCNI23S3RLK5"; //Read key
const char* writekey = "4R1AOTLMZVLWDFEV";

WiFiEspClient    client;      //create a wifi client

// ------------------------------
const uint8_t CRC8_POLY = 0x07;
uint8_t table_crc8[256] = {
  0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
  0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
  0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
  0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
  0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
  0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
  0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
  0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
  0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
  0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
  0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
  0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
  0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
  0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
  0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
  0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};

// This is the LoRa receiver

const byte numChars = 200;
const byte arrSize = 200;

uint8_t rebuilded_data[numChars];

uint8_t channel1[arrSize] = { 0 };
uint8_t channel2[arrSize] = { 0 };
uint8_t channel3[arrSize] = { 0 };
uint8_t channel4[arrSize] = { 0 };

bool channel1_de = false;
bool channel2_de = false;
bool channel3_de = false;
bool channel4_de = false;

//uint8_t* channel2_de[arrSize] = { 0 };
//uint8_t* channel3_de[arrSize] = { 0 };
//uint8_t* channel4_de[arrSize] = { 0 };

// uint8_t endMarker = '10';
// uint8_t endMarker = 10;
// uint8_t endMarker = '\n';

uint8_t endMarker = '!';
uint8_t totalLen = 0;

// char endMarker = '\0'; //work

int rebuilded_data_len = 0;

int len1 = 0;
int len2 = 0;
int len3 = 0;
int len4 = 0;

int maxLen = 0;

bool s1_finish = false;
bool s2_finish = false;
bool s3_finish = false;
bool s4_finish = false;

bool s1_work = false;
bool s2_work = false;
bool s3_work = false;
bool s4_work = false;

bool resetSys = false;
bool crc_check = false;

boolean reform = false;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial1.begin(9600);  //RF1
  Serial2.begin(9600);  //RF2
  Serial3.begin(9600);  //RF3
  Serial4.begin(9600);  //RF4
  //EspSerial.begin(9600);
  delay(500);

  pinMode(29, OUTPUT);  //RF1_M0
  pinMode(28, OUTPUT);  //RF1_M1

  pinMode(27, OUTPUT);  //RF2_M0
  pinMode(26, OUTPUT);  //RF2_M1

  pinMode(24, OUTPUT);  //RF3_M0
  pinMode(25, OUTPUT);  //RF3_M1

  pinMode(22, OUTPUT);  //RF4_M0
  pinMode(23, OUTPUT);  //RF4_M1

  digitalWrite(28, LOW);
  digitalWrite(29, LOW);

  digitalWrite(26, LOW);
  digitalWrite(27, LOW);

  digitalWrite(24, LOW);
  digitalWrite(25, LOW);

  digitalWrite(22, LOW);
  digitalWrite(23, LOW);

  /*
    // Wifi --------------------------
    //WiFi.init(&EspSerial);

     //WiFi.mode(wifi.STATION);

    // Connect or reconnect to WiFi
    if (WiFi.status() != WL_CONNECTED) {

      Serial.print("Attempting to connect to SSID: ");
      Serial.println(ssid);

      while (WiFi.status() != WL_CONNECTED) {
        WiFi.begin(ssid, pass); // Connect to WPA/WPA2 network
        Serial.print("Processing ......................");
        delay(5000);
      }

      Serial.println("\nConnected to Wi-Fi");
      ThingSpeak.begin(client);    // Initialize ThingSpeak
    }
  */
  Serial.println("");
  Serial.println("Arduino is ready to Receive message !!!");
}

void loop() {
  // put your main code here, to run repeatedly:
  serial1Recv();
  delayMicroseconds(1000);
  serial2Recv();
  delayMicroseconds(1000);
  serial3Recv();
  delayMicroseconds(1000);
  serial4Recv();
  delayMicroseconds(1000);

  checkAndRebuild();
  delayMicroseconds(1000);
  reformMessage();
  delayMicroseconds(1000);
  resetArr();
  delayMicroseconds(1000);
}


void serial1Recv() {

  uint8_t rc1;

  if (Serial1.available()) {        //When RF Module 1 receive data, it will be printed

    Serial.println("Serial1 Received: ");
    while (Serial1.available()) {
      rc1 = Serial1.read();
      delayMicroseconds(1000);

      if (rc1 != endMarker) {
        channel1[len1] = (uint8_t)rc1;
        Serial.write((char)channel1[len1]);
        Serial.print(" -> ");
        Serial.print(channel1[len1]);;
        len1++;
        Serial.print(" || len1 :");
        Serial.println(len1);
        if (len1 > maxLen) {
          maxLen = len1;
        }
      }
    }
    if (rc1 == endMarker) {
      // raid5_reb_start = true;
      Serial.println("Serial1 has finished receiving messages");
      s1_finish = true;
      s1_work = true;
    }
    Serial.println();
  }

}

void serial2Recv() {

  uint8_t rc2;

  if (Serial2.available()) {   //When RF Module 2 receive data, it will be printed
    // raid5_reb = true;
    Serial.println("Serial2 Received: ");

    while (Serial2.available()) {
      rc2 = Serial2.read();
      delayMicroseconds(1000);
      if (rc2 != endMarker) {
        channel2[len2] = (uint8_t)rc2;
        Serial.write((char)channel2[len2]);
        Serial.print(" -> ");
        Serial.print(channel2[len2]);
        len2++;
        Serial.print(" len2 :");
        Serial.println(len2);
        if (len2 > maxLen) {
          maxLen = len2;
        }
      }
    }
    if (rc2 == endMarker) {
      Serial.println("Serial2 has finished receiving messages");
      s2_finish = true;
      s2_work = true;
    }
    Serial.println();
  }
}


void serial3Recv() {

  uint8_t rc3;

  if (Serial3.available()) {  //When RF Module 3 receive data, it will be printed
    // raid5_reb = true;
    Serial.println("Serial3 Received: ");

    while (Serial3.available()) {
      rc3 = Serial3.read();
      delayMicroseconds(1000);
      if (rc3 != endMarker) {
        channel3[len3] = (uint8_t)rc3;
        Serial.write((char)channel3[len3]);
        Serial.print(" -> ");
        Serial.print(channel3[len3]);
        len3++;
        Serial.print(" len3 :");
        Serial.println(len3);
        if (len3 > maxLen) {
          maxLen = len3;
        }
      }
    }
    if (rc3 == endMarker) {
      // raid5_reb_start = true;
      Serial.println("Serial3 has finished receiving messages");
      s3_finish = true;
      s3_work = true;
    }
    Serial.println();
    Serial.println();
  }
}

void serial4Recv() {

  uint8_t rc4;
  if (Serial4.available()) {   //When RF Module 4 receive data, it will be printed
    // raid5_reb = true;
    Serial.println("Serial4 Received: ");

    while (Serial4.available()) {
      rc4 = Serial4.read();
      delayMicroseconds(1000);
      if (rc4 != endMarker) {
        channel4[len4] = (uint8_t)rc4;
        Serial.write((char)channel4[len4]);
        Serial.print(" -> ");
        Serial.print(channel4[len4]);
        len4++;
        Serial.print(" len4 :");
        Serial.println(len4);
        if (len4 > maxLen) {
          maxLen = len4;
        }
      }
    }

    if (rc4 == endMarker) {

      Serial.println("Serial4 has finished receiving messages");
      s4_finish = true;
      s4_work = true;
    }
    Serial.println();
    Serial.println();
  }
}

bool transmission_finished() {
  return (s1_finish && s2_finish && s3_finish);
}

// --------- crc8 check 1 ------------


// ------------------ check and rebuild -----------------
void checkAndRebuild() {

  bool check_tran_finish = transmission_finished();
  if (check_tran_finish == true) {
    crc_check = true;
    s1_finish = false;
    s2_finish = false;
    s3_finish = false;

    Serial.println("The transmission is finsihed");

    Serial.println(" --------- crc8 check --------- ");
    int crc_length = (maxLen - 1) * 3 / 2;
    // ---- ch.1 ----
    channel1_de = crc8_decode(channel1, crc_length, table_crc8);
    if (channel1_de == true) {
      Serial.println(" channel1: Success");
    } else {
      Serial.println(" channel1: Fail");
    }

    // ---- ch.2 ----
    channel2_de = crc8_decode(channel2, crc_length, table_crc8);
    if (channel2_de == true) {
      Serial.println(" channel2: Success");
    } else {
      Serial.println(" channel2: Fail");
    }

    // ---- ch.3 ----
    channel3_de = crc8_decode(channel3, crc_length, table_crc8);
    if (channel3_de == true) {
      Serial.println(" channel3: Success");
    } else {
      Serial.println(" channel3: Fail");
    }

    // ---- ch.4 ----
    channel4_de = crc8_decode(channel4, crc_length, table_crc8);
    if (channel4_de == true) {
      Serial.println(" channel4: Success");
    } else {
      Serial.println(" channel4: Fail");
    }


    Serial.println(" ");


    reform = true;
    // channel1
    Serial.println(" --------------- channel1[i] --------------- :");
    if (s1_work == false) {
      for (int z = 0; z < maxLen; z++) {
        // if the data is missing --> rebuild
        if (channel1[z] == 0) {
          Serial.print("channel1[");
          Serial.print(z);
          Serial.println("] need rebuild");
          channel1[z] = (channel2[z] ^ channel3[z] ^ channel4[z]);
        }
      }
    }

    // channel2
    Serial.println(" --------------- channel2[i] --------------- :");
    if (s2_work == false) {
      for (int z = 0; z < maxLen; z++) {
        // if the data is missing --> rebuild
        if (channel2[z] == 0) {
          Serial.print("channel2[");
          Serial.print(z);
          Serial.println("] need rebuild");
          channel2[z] = (channel1[z] ^ channel3[z] ^ channel4[z]);
        }
      }
    }

    // channel3
    Serial.println(" --------------- channel3[i] --------------- :");
    if (s3_work == false) {
      for (int z = 0; z < maxLen; z++) {
        // if the data is missing --> rebuild
        if (channel3[z] == 0) {
          Serial.print("channel3[");
          Serial.print(z);
          Serial.println("] need rebuild");
          channel3[z] = (channel1[z] ^ channel2[z] ^ channel4[z]);
        }
      }
    }

    // channel4
    Serial.println(" --------------- channel4[i] --------------- :");
    if (s4_work == false) {
      for (int z = 0; z < maxLen; z++) {
        // if the data is missing --> rebuild
        if (channel4[z] == 0) {
          Serial.print("channel4[");
          Serial.print(z);
          Serial.println("] need rebuild");
          channel4[z] = (channel1[z] ^ channel2[z] ^ channel3[z]);
        }
      }
    }

    Serial.println(" --------------- channel1[i] --------------- :");
    // printout the stored array
    for (int i = 0; i < maxLen; i++) {
      Serial.print((char)channel1[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < maxLen; i++) {
      Serial.print((uint8_t)channel1[i]);
      Serial.print(", ");
    }
    Serial.println("");

    Serial.println(" --------------- channel2[i] --------------- :");
    // printout the stored array
    for (int i = 0; i < maxLen; i++) {
      Serial.print((char)channel2[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < maxLen; i++) {
      Serial.print((uint8_t)channel2[i]);
      Serial.print(", ");
    }
    Serial.println("");

    Serial.println(" --------------- channel3[i] --------------- :");
    // printout the stored array
    for (int i = 0; i < maxLen; i++) {
      Serial.print((char)channel3[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < maxLen; i++) {
      Serial.print((uint8_t)channel3[i]);
      Serial.print(", ");
    }
    Serial.println("");

    Serial.println(" --------------- channel4[i] --------------- :");
    // printout the stored array
    for (int i = 0; i < maxLen; i++) {
      Serial.print((char)channel4[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < maxLen; i++) {
      Serial.print((uint8_t)channel4[i]);
      Serial.print(", ");
    }
    Serial.println("");

    //  raid5_reb_start = false;
    check_tran_finish = false;

    s1_work = false;
    s2_work = false;
    s3_work = false;
    s4_work = false;
  }

  // check_tran_finish = false;
  //}
}

// ------------------ crc8 check3 -----------------

bool crc8_decode(const uint8_t data[], size_t length, const uint8_t crc8_table[]) {

  uint8_t crc = 0;
  uint8_t crc_decode[arrSize];
  for (size_t i = 0; i < length; i++) {
    crc = crc8_table[crc ^ data[i]];
  }

  if (crc == 0) {
    //for (int i = 0; i < length - 1; i++) {
    //  crc_decode[i] = data[i];
    //}
    crc_check = false;
    return true;
  } else {
    crc_check = false;
    Serial.println("Channel with error");
    return false;
  }
}


// ------------------ crc8 check2 -----------------
/*
  uint8_t* crc8_decode(const uint8_t data[], size_t length, const uint8_t crc8_table[]) {

  uint8_t crc = 0;
  uint8_t crc_decode[arrSize];
  for (size_t i = 0; i < length; i++) {
    crc = crc8_table[crc ^ data[i]];
  }

  if (crc == 0) {
    for (int i = 0; i < length - 1; i++) {
      crc_decode[i] = data[i];
    }
    crc_check = false;
    return crc_decode;
  } else {
    crc_check = false;
    Serial.println("Channel with error");
    //return NULL;
    return false;
  }
  }
*/
// ------------------ reform the original message -----------------
void reformMessage() {

  int data_index_reb = 0;
  int data_pos_reb = 0;
  rebuilded_data_len = (maxLen - 1) * 3; // the last char is crc, *3 for 3 data channels

  if (reform == true) {
    Serial.print("rebuilded_data_len = ");
    Serial.println(rebuilded_data_len);


    for (int i = 0; i < rebuilded_data_len / 3; i++) {
      rebuilded_data[data_index_reb] = channel1[i];
      data_index_reb++;
    }

    for (int i = 0; i < rebuilded_data_len / 3; i++) {
      rebuilded_data[data_index_reb] = channel2[i];
      data_index_reb++;
    }

    for (int i = 0; i < rebuilded_data_len / 3; i++) {
      rebuilded_data[data_index_reb] = channel3[i];
      data_index_reb++;
    }

    Serial.println(" ");
    Serial.println(" ------------------------------------------ ");
    // Serial.print("maxLen = ");
    // Serial.println(maxLen);

    // Serial.print("rebuilded_data_len = ");
    // Serial.println(rebuilded_data_len);

    Serial.println(" The reformed result is ");
    for (int i = 0; i < rebuilded_data_len; i++) {
      Serial.print((char)rebuilded_data[i]);
      Serial.print(", ");
    }

    Serial.println(" ------------------------------------------ ");
    Serial.println(" The message is ");
    for (int i = 0; i < rebuilded_data_len; i++) {
      Serial.print((char)rebuilded_data[i]);
    }

    reform = false;
    resetSys = true;
  }
}


void resetArr() {

  if (resetSys == true) {
    memset(rebuilded_data, 0, rebuilded_data_len);
    memset(channel1, 0, maxLen);
    memset(channel2, 0, maxLen);
    memset(channel3, 0, maxLen);
    memset(channel4, 0, maxLen);

    maxLen = 0;

    len1 = 0;
    len2 = 0;
    len3 = 0;
    len4 = 0;

    rebuilded_data_len = 0;

    resetSys = false;

    // -----------
    int rebuilded_data_len = 0;

    s1_finish = false;
    s2_finish = false;
    s3_finish = false;
    s4_finish = false;

    s1_work = false;
    s2_work = false;
    s3_work = false;
    s4_work = false;

    resetSys = false;

    reform = false;
  }
}
