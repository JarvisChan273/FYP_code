// v2 RAID4 seperated works

#include "Arduino.h"

#include <SoftwareSerial.h>

SoftwareSerial Serial4(10, 11);  // RX, TX

// Reminder -->    size_t length = sizeof(data) / sizeof(data[0]);

// This is the LoRa transmitter

const byte numChars = 200;
const byte arrSize = 100;

uint8_t dataInput[numChars];

uint8_t channel1[arrSize] = { 0 };
uint8_t channel2[arrSize] = { 0 };
uint8_t channel3[arrSize] = { 0 };
uint8_t channel4[arrSize] = { 0 };

int dataLen = 0;
int tranLen = 0;

boolean newData = false;
boolean raid5_on = false;

char endMarker = '\n';

// ------------------------------
const uint8_t CRC8_POLY = 0x07;
uint8_t table_crc8[256] = {
  0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
  0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
  0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
  0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
  0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
  0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
  0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
  0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
  0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
  0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
  0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
  0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
  0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
  0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
  0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
  0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
};




void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial1.begin(9600);  //RF1
  Serial2.begin(9600);  //RF2
  Serial3.begin(9600);  //RF3
  Serial4.begin(9600);  //RF4
  delay(500);

  pinMode(29, OUTPUT);  //RF1_M0
  pinMode(28, OUTPUT);  //RF1_M1

  pinMode(27, OUTPUT);  //RF2_M0
  pinMode(26, OUTPUT);  //RF2_M1

  pinMode(24, OUTPUT);  //RF3_M0
  pinMode(25, OUTPUT);  //RF3_M1

  pinMode(22, OUTPUT);  //RF4_M0
  pinMode(23, OUTPUT);  //RF4_M1

  digitalWrite(28, LOW);
  digitalWrite(29, LOW);

  digitalWrite(26, LOW);
  digitalWrite(27, LOW);

  digitalWrite(24, LOW);
  digitalWrite(25, LOW);

  digitalWrite(22, LOW);
  digitalWrite(23, LOW);

  Serial.println("");
  Serial.println("Arduino is ready to send message !!!");

}

void loop() {
  // put your main code here, to run repeatedly:
  recvWithEndMarker();
  delayMicroseconds(1000);
  showNewData();
  delayMicroseconds(1000);
  raid4();
  delayMicroseconds(1000);
  resetArray();
  delayMicroseconds(1000);

}

void recvWithEndMarker() {
  static byte ndx = 0;
  char rc;

  while (Serial.available() > 0 && newData == false) {
    rc = Serial.read();
    delayMicroseconds(1000);

    if (rc != endMarker) {
      dataInput[ndx] = rc;
      ndx++;
      dataLen++;
      if (ndx >= numChars) {
        ndx = numChars - 1;
      }
    }
    else {
      // dataInput[ndx] = '\n'; // terminate the string

      //Serial.print(" dataInput[");
      //Serial.print(ndx);
      //Serial.print("] is: ");
      //Serial.println(dataInput[ndx]);

      // data_input[ndx + 1] = '\n';
      ndx = 0;
      newData = true;
    }
    raid5_on = true;
  }
}

void showNewData() {
  if (newData == true) {
    // Serial.println(" ---------------------------------------- ");
    Serial.println(" ============================================ ");

    Serial.print("This message is just in ... :  ");
    Serial.print(" ");
    for (int i = 0; i < dataLen; i++) {        // ---- < len
      Serial.print((char)dataInput[i]);
    }

    Serial.println(" ");
    Serial.print("data length : ");
    Serial.print(dataLen);            // ---- len
    Serial.println("");
    newData = false;
  }
}

void raid4() {

  int data_index = 0;
  int i1 = 0;
  int i2 = 0;
  int i3 = 0;
  int i4 = 0;

  tranLen = (int)(dataLen / 3) + 1;

  if (raid5_on == true) {
    // Serial.print(" ---- tranLen :");
    // Serial.println(tranLen);

    int data_input_pos = 0;
    // int len = tranLen / 3 + 1;

    for ( i1; i1 < tranLen; i1++) {
      if (data_index <= dataLen) {
        channel1[i1] = dataInput[data_index];  // int
        data_index++;
      }
    }

    for ( i2; i2 < tranLen; i2++) {
      if (data_index <= dataLen) {
        channel2[i2] = dataInput[data_index];  // int
        data_index++;
      }
    }

    for ( i3; i3 < tranLen; i3++) {
      if (data_index <= dataLen) {
        channel3[i3] = dataInput[data_index];  // int
        data_index++;
      }
    }

    for ( i4; i4 < tranLen; i4++) {
        channel4[i4] = (channel1[i4] ^ channel2[i4] ^ channel3[i4]); // int
        data_index++;
    }

    channel1[i1] = crc8(channel1, tranLen, table_crc8);
    channel2[i2] = crc8(channel2, tranLen, table_crc8);
    channel3[i3] = crc8(channel3, tranLen, table_crc8);
    channel4[i4] = crc8(channel4, tranLen, table_crc8);

    channel1[i1 + 1] = '!'; // = '\0'
    channel2[i2 + 1] = '!';
    channel3[i3 + 1] = '!';
    channel4[i4 + 1] = '!';

    // printout the stored array
    // --------------- channel1[i] ---------------
    Serial.println(" --------------- channel1[i] --------------- :");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((char)channel1[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((uint8_t)channel1[i]);
      Serial1.write((uint8_t)channel1[i]);        // send the data thro. LoRa1
      delayMicroseconds(1000);
      Serial.print(", ");
    }
    Serial.println("");

    // --------------- channel2[i] ---------------
    Serial.println(" --------------- channel2[i] --------------- :");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((char)channel2[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((uint8_t)channel2[i]);
      Serial2.write((uint8_t)channel2[i]);        // send the data thro. LoRa2
      delayMicroseconds(1000);
      Serial.print(", ");
    }
    Serial.println("");

    // --------------- channel3[i] ---------------
    Serial.println(" --------------- channel3[i] --------------- :");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((char)channel3[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((uint8_t)channel3[i]);
      Serial3.write((uint8_t)channel3[i]);        // send the data thro. LoRa3
      delayMicroseconds(1000);
      Serial.print(", ");
    }
    Serial.println("");

    // --------------- channel4[i] ---------------
    Serial.println(" --------------- channel4[i] --------------- :");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((char)channel4[i]);
      Serial.print(", ");
    }
    Serial.println("");
    for (int i = 0; i < tranLen + 2; i++) {
      Serial.print((uint8_t)channel4[i]);
      Serial4.write((uint8_t)channel4[i]);        // send the data thro. LoRa4
      delayMicroseconds(1000);
      Serial.print(", ");
    }
    Serial.println("");

    raid5_on = false;
  }
}

// return sigal crc value
uint8_t crc8(const uint8_t data[], size_t length, const uint8_t table[]) {
  uint8_t crc = 0;
  for (size_t i = 0; i < length; ++i) {
    crc = table[crc ^ data[i]];
  }
  return crc;
}


void resetArray() {

  //data_input[numChars] = {0};
  memset(dataInput, 0, tranLen + 1);
  memset(channel1, 0, arrSize + 1);
  memset(channel2, 0, arrSize + 1);
  memset(channel3, 0, arrSize + 1);
  memset(channel4, 0, arrSize + 1);

  dataLen = 0;
  tranLen = 0;
  newData = false;
  raid5_on = false;
}
